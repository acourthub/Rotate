<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pump.fun Auto-Buyback System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a3e 50%, #2d1b69 100%);
            min-height: 100vh;
            color: white;
            overflow-x: hidden;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        .header {
            text-align: center;
            padding: 40px 0 60px 0;
            position: relative;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1);
            border-radius: 2px;
        }

        .header h1 {
            font-size: 3.5rem;
            font-weight: 800;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #ff6b6b, #4ecdc4, #45b7d1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.8;
            margin-bottom: 20px;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid #4CAF50;
            padding: 8px 16px;
            border-radius: 25px;
            font-weight: 600;
            animation: pulse 2s infinite;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            background: #4CAF50;
            border-radius: 50%;
            animation: blink 1.5s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 50px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #4ecdc4, transparent);
            transition: left 0.5s ease;
        }

        .stat-card:hover::before {
            left: 100%;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.12);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .stat-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
            opacity: 0.8;
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 8px;
            color: #4ecdc4;
        }

        .stat-label {
            font-size: 1rem;
            opacity: 0.7;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .countdown-timer {
            background: linear-gradient(135deg, #ff6b6b, #ff8e53);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Control Panel */
        .control-panel {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 40px;
            text-align: center;
        }

        .manual-trigger {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .manual-trigger:hover {
            transform: scale(1.05);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
        }

        .manual-trigger:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Transaction History */
        .transaction-section {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 30px;
        }

        .section-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .transaction-filters {
            display: flex;
            gap: 10px;
            margin-bottom: 25px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            background: transparent;
            color: white;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .filter-btn.active,
        .filter-btn:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.5);
        }

        .transactions-list {
            max-height: 600px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .transactions-list::-webkit-scrollbar {
            width: 6px;
        }

        .transactions-list::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .transactions-list::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
        }

        .transaction {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 4px solid transparent;
            transition: all 0.3s ease;
            position: relative;
        }

        .transaction:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(5px);
        }

        .transaction.fee_claim {
            border-left-color: #4CAF50;
        }

        .transaction.buyback {
            border-left-color: #2196F3;
        }

        .transaction-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
            flex-wrap: wrap;
            gap: 10px;
        }

        .transaction-type {
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .transaction-amount {
            background: linear-gradient(135deg, #4ecdc4, #44a08d);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 700;
        }

        .transaction-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .detail-label {
            font-size: 0.85rem;
            opacity: 0.7;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .detail-value {
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9rem;
            word-break: break-all;
            background: rgba(255, 255, 255, 0.1);
            padding: 8px 12px;
            border-radius: 8px;
        }

        .streamflow-proof {
            background: linear-gradient(135deg, #667eea, #764ba2);
            padding: 15px;
            border-radius: 12px;
            margin-top: 15px;
        }

        .proof-link {
            color: #64B5F6;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .proof-link:hover {
            color: #90CAF9;
            text-decoration: underline;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            opacity: 0.6;
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 20px;
        }

        /* Loading States */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #4ecdc4;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .header h1 {
                font-size: 2.5rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .transaction-details {
                grid-template-columns: 1fr;
            }
            
            .transaction-header {
                flex-direction: column;
                align-items: flex-start;
            }
        }

        /* Animations */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .slide-in {
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🚀 Pump.fun Auto-Buyback</h1>
            <p>Automated creator fee claiming and token buyback system</p>
            <div class="status-badge">
                <div class="status-dot"></div>
                <span>SYSTEM ACTIVE</span>
            </div>
        </div>

        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">💰</div>
                <div class="stat-value" id="fees-claimed">0.0000</div>
                <div class="stat-label">SOL Fees Claimed</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">🔄</div>
                <div class="stat-value" id="total-buybacks">0.0000</div>
                <div class="stat-label">SOL Total Buybacks</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">📊</div>
                <div class="stat-value" id="transaction-count">0</div>
                <div class="stat-label">Total Transactions</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">⏰</div>
                <div class="stat-value countdown-timer" id="next-run">--:--</div>
                <div class="stat-label">Next Auto-Run</div>
            </div>
        </div>

        <!-- Control Panel -->
        <div class="control-panel">
            <h3 style="margin-bottom: 15px;">Manual Control</h3>
            <button class="manual-trigger" id="manual-trigger" onclick="triggerManualBuyback()">
                Trigger Manual Buyback
            </button>
            <p style="margin-top: 10px; opacity: 0.7; font-size: 0.9rem;">
                Force an immediate fee claim and buyback cycle
            </p>
        </div>

        <!-- Transaction History -->
        <div class="transaction-section">
            <div class="section-title">
                <span>📈</span>
                <span>Transaction History</span>
            </div>
            
            <div class="transaction-filters">
                <button class="filter-btn active" onclick="filterTransactions('all')">All</button>
                <button class="filter-btn" onclick="filterTransactions('fee_claim')">Fee Claims</button>
                <button class="filter-btn" onclick="filterTransactions('buyback')">Buybacks</button>
            </div>
            
            <div class="transactions-list" id="transactions-list">
                <div class="empty-state">
                    <div class="empty-state-icon">⏳</div>
                    <h3>Waiting for transactions...</h3>
                    <p>The system will automatically start claiming fees and executing buybacks</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // State management
        let allTransactions = [];
        let currentFilter = 'all';
        let wsConnection = null;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;

        // Initialize the application
        function init() {
            connectWebSocket();
            loadInitialData();
            startCountdownTimer();
            
            // Auto-refresh data every 30 seconds as fallback
            setInterval(loadStats, 30000);
        }

        // WebSocket connection for real-time updates
        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.hostname}:8080`;
            
            wsConnection = new WebSocket(wsUrl);
            
            wsConnection.onopen = function() {
                console.log('WebSocket connected');
                reconnectAttempts = 0;
                updateConnectionStatus(true);
            };
            
            wsConnection.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    handleRealtimeUpdate(data);
                } catch (error) {
                    console.error('Error parsing WebSocket message:', error);
                }
            };
            
            wsConnection.onclose = function() {
                console.log('WebSocket disconnected');
                updateConnectionStatus(false);
                
                // Attempt to reconnect
                if (reconnectAttempts < maxReconnectAttempts) {
                    setTimeout(() => {
                        reconnectAttempts++;
                        connectWebSocket();
                    }, 2000 * reconnectAttempts);
                }
            };
            
            wsConnection.onerror = function(error) {
                console.error('WebSocket error:', error);
            };
        }

        function updateConnectionStatus(connected) {
            const statusBadge = document.querySelector('.status-badge');
            const statusText = statusBadge.querySelector('span');
            const statusDot = statusBadge.querySelector('.status-dot');
            
            if (connected) {
                statusText.textContent = 'SYSTEM ACTIVE';
                statusBadge.style.background = 'rgba(76, 175, 80, 0.2)';
                statusBadge.style.borderColor = '#4CAF50';
                statusDot.style.background = '#4CAF50';
            } else {
                statusText.textContent = 'RECONNECTING...';
                statusBadge.style.background = 'rgba(255, 152, 0, 0.2)';
                statusBadge.style.borderColor = '#FF9800';
                statusDot.style.background = '#FF9800';
            }
        }

        // Handle real-time updates from WebSocket
        function handleRealtimeUpdate(data) {
            // Add new transaction to the beginning of the array
            allTransactions.unshift(data);
            
            // Update stats
            loadStats();
            
            // Update transaction list
            renderTransactions();
            
            // Add visual feedback for new transaction
            const transactionElements = document.querySelectorAll('.transaction');
            if (transactionElements.length > 0) {
                transactionElements[0].classList.add('slide-in');
            }
        }

        // Load initial data
        async function loadInitialData() {
            await Promise.all([loadStats(), loadTransactions()]);
        }

        // Load statistics
        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                if (!response.ok) throw new Error('Failed to fetch stats');
                
                const stats = await response.json();
                
                animateValue('fees-claimed', parseFloat(document.getElementById('fees-claimed').textContent), stats.feesClaimed, 4);
                animateValue('total-buybacks', parseFloat(document.getElementById('total-buybacks').textContent), stats.totalBuybacks, 4);
                animateValue('transaction-count', parseInt(document.getElementById('transaction-count').textContent), stats.transactionCount, 0);
                
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        // Load transaction history
        async function loadTransactions() {
            try {
                const response = await fetch('/api/transactions');
                if (!response.ok) throw new Error('Failed to fetch transactions');
                
                const data = await response.json();
                allTransactions = data.transactions || [];
                renderTransactions();
                
            } catch (error) {
                console.error('Error loading transactions:', error);
                showEmptyState('Error loading transactions');
            }
        }

        // Animate number changes
        function animateValue(elementId, start, end, decimals) {
            const element = document.getElementById(elementId);
            const duration = 1000;
            const increment = (end - start) / (duration / 16);
            let current = start;
            
            const timer = setInterval(() => {
                current += increment;
                if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {
                    current = end;
                    clearInterval(timer);
                }
                
                if (elementId === 'transaction-count') {
                    element.textContent = Math.floor(current);
                } else {
                    element.textContent = current.toFixed(decimals);
                }
            }, 16);
        }

        // Render transactions based on current filter
        function renderTransactions() {
            const container = document.getElementById('transactions-list');
            const filteredTransactions = currentFilter === 'all' 
                ? allTransactions 
                : allTransactions.filter(tx => tx.type === currentFilter);
                
            if (filteredTransactions.length === 0) {
                showEmptyState();
                return;
            }
            
            container.innerHTML = filteredTransactions.map(tx => createTransactionElement(tx)).join('');
        }

        // Create transaction HTML element
        function createTransactionElement(tx) {
            const typeLabel = tx.type === 'fee_claim' ? 'Fee Claim' : 'Token Buyback';
            const typeIcon = tx.type === 'fee_claim' ? '💰' : '🔄';
            const streamflowSection = tx.streamflowProof ? `
                <div class="streamflow-proof">
                    <div class="detail-label">Streamflow Proof</div>
                    <a href="${tx.streamflowProof.proofUrl}" class="proof-link" target="_blank">
                        View Payment Proof ✓
                    </a>
                    <div style="margin-top: 8px; font-size: 0.85rem; opacity: 0.8;">
                        ID: ${tx.streamflowProof.streamflowId}
                    </div>
                </div>
            ` : '';
            
            return `
                <div class="transaction ${tx.type} fade-in">
                    <div class="transaction-header">
                        <div class="transaction-type">
                            <span>${typeIcon}</span>
                            <span>${typeLabel}</span>
                        </div>
                        <div class="transaction-amount">${tx.amount.toFixed(4)} SOL</div>
                    </div>
                    
                    <div class="transaction-details">
                        <div class="detail-item">
                            <div class="detail-label">Transaction Signature</div>
                            <div class="detail-value">${tx.signature}</div>
                        </div>
                        
                        <div class="detail-item">
                            <div class="detail-label">Timestamp</div>
                            <div class="detail-value">${formatTimestamp(tx.timestamp)}</div>
                        </div>
                    </div>
                    
                    ${streamflowSection}
                </div>
            `;
        }

        // Format timestamp for display
        function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }

        // Show empty state
        function showEmptyState(message = null) {
            const container = document.getElementById('transactions-list');
            const defaultMessage = currentFilter === 'all' 
                ? 'Waiting for transactions...'
                : `No ${currentFilter.replace('_', ' ')} transactions yet`;
                
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">⏳</div>
                    <h3>${message || defaultMessage}</h3>
                    <p>The system runs automatically every 10 minutes</p>
                </div>
            `;
        }

        // Filter transactions
        function filterTransactions(filter) {
            currentFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Re-render transactions
            renderTransactions();
        }

        // Manual buyback trigger
        async function triggerManualBuyback() {
            const button = document.getElementById('manual-trigger');
            const originalText = button.textContent;
            
            button.disabled = true;
            button.innerHTML = '<span class="loading"></span> Processing...';
            
            try {
                const response = await fetch('/api/trigger-buyback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Success feedback
                    button.textContent = '✓ Success!';
                    button.style.background = 'linear-gradient(135deg, #4CAF50, #45a049)';
                    
                    setTimeout(() => {
                        button.textContent = originalText;
                        button.style.background = '';
                        button.disabled = false;
                    }, 3000);
                } else {
                    throw new Error(result.error || 'Unknown error');
                }
                
            } catch (error) {
                console.error('Error triggering manual buyback:', error);
                
                // Error feedback
                button.textContent = '✗ Error';
                button.style.background = 'linear-gradient(135deg, #f44336, #d32f2f)';
                
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.background = '';
                    button.disabled = false;
                }, 3000);
            }
        }

        // Countdown timer for next auto-run
        function startCountdownTimer() {
            updateCountdown();
            setInterval(updateCountdown, 1000);
        }

        function updateCountdown() {
            const now = new Date();
            const minutes = now.getMinutes();
            const seconds = now.getSeconds();
            
            // Calculate next 10-minute interval
            const nextRunMinutes = 10 - (minutes % 10);
            const nextRunSeconds = 60 - seconds;
            
            // Format display
            const displayMinutes = nextRunMinutes === 10 ? 0 : nextRunMinutes;
            const displaySeconds = nextRunSeconds === 60 ? 0 : nextRunSeconds;
            
            const display = `${displayMinutes}:${displaySeconds.toString().padStart(2, '0')}`;
            document.getElementById('next-run').textContent = display;
        }

        // Initialize the application when DOM is loaded
        document.addEventListener('DOMContentLoaded', init);

        // Handle page visibility changes
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden && wsConnection && wsConnection.readyState !== WebSocket.OPEN) {
                connectWebSocket();
            }
        });
    </script>
</body>
</html>
